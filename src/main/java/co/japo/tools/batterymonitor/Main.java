package co.japo.tools.batterymonitor;

import co.japo.tools.batterymonitor.util.Kernel32;
import co.japo.tools.batterymonitor.util.SoundUtil;

/**
 *
 * @author JapoDeveloper
 */
public class Main extends javax.swing.JFrame {

    private Kernel32.SYSTEM_POWER_STATUS batteryStatus;
    private byte timerCount = 60;
    private boolean timerStopped;

    /**
     * Creates new form Main
     */
    public Main() {
        batteryStatus = new Kernel32.SYSTEM_POWER_STATUS();
        initComponents();
        spinLowest.setValue(10);
        spinHighest.setValue(90);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblHeader = new javax.swing.JLabel();
        lblLowest = new javax.swing.JLabel();
        lblHighest = new javax.swing.JLabel();
        spinLowest = new javax.swing.JSpinner();
        spinHighest = new javax.swing.JSpinner();
        btnInitControl = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResult = new javax.swing.JTextArea();
        lblStatus = new javax.swing.JLabel();
        lblTimer = new javax.swing.JLabel();
        lblTimerCount = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblHeader.setText("Battery Monitor");

        lblLowest.setText("Lowest");

        lblHighest.setText("Highest");

        spinLowest.setModel(new javax.swing.SpinnerNumberModel(Byte.valueOf((byte)10), Byte.valueOf((byte)10), Byte.valueOf((byte)99), Byte.valueOf((byte)5)));
        spinLowest.setName(""); // NOI18N

        spinHighest.setModel(new javax.swing.SpinnerNumberModel(Byte.valueOf((byte)10), Byte.valueOf((byte)10), Byte.valueOf((byte)99), Byte.valueOf((byte)5)));

        btnInitControl.setText("Start");
        btnInitControl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInitControlActionPerformed(evt);
            }
        });

        txtResult.setEditable(false);
        txtResult.setColumns(20);
        txtResult.setRows(5);
        jScrollPane1.setViewportView(txtResult);

        lblStatus.setText("Status");

        lblTimer.setText("Timer:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(157, 157, 157)
                .addComponent(lblHeader)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStatus)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblTimer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTimerCount))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(lblLowest)
                        .addGap(18, 18, 18)
                        .addComponent(spinLowest, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(lblHighest)
                        .addGap(18, 18, 18)
                        .addComponent(spinHighest, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                        .addComponent(btnInitControl)))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblHeader)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLowest)
                    .addComponent(lblHighest)
                    .addComponent(spinLowest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinHighest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnInitControl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(lblTimer)
                    .addComponent(lblTimerCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnInitControlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInitControlActionPerformed
        if (btnInitControl.getText().equalsIgnoreCase("start")) {
            initMonitor();
            btnInitControl.setText("Stop");
        } else if (btnInitControl.getText().equalsIgnoreCase("stop")) {
            stopMonitor();
            btnInitControl.setText("Start");
        }
    }//GEN-LAST:event_btnInitControlActionPerformed

    private void initMonitor() {
        checkBatteryLevels();
        spinLowest.setEnabled(false);
        spinHighest.setEnabled(false);
        timerStopped = false;
        new Thread(new TimerThread()).start();
    }

    private void stopMonitor() {
        spinLowest.setEnabled(true);
        spinHighest.setEnabled(true);
        lblTimerCount.setText("");
        txtResult.setText("");
        timerStopped = true;
    }

    private void checkBatteryLevels() {
        Kernel32.INSTANCE.GetSystemPowerStatus(batteryStatus);
        txtResult.setText(batteryStatus.toString());
        int lowest = Integer.parseInt(spinLowest.getValue().toString()),
                highest = Integer.parseInt(spinHighest.getValue().toString());
        if (batteryStatus.getBatteryLife() <= lowest
                || batteryStatus.getBatteryLife() >= highest) {
            SoundUtil.playAlert();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnInitControl;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblHighest;
    private javax.swing.JLabel lblLowest;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblTimer;
    private javax.swing.JLabel lblTimerCount;
    private javax.swing.JSpinner spinHighest;
    private javax.swing.JSpinner spinLowest;
    private javax.swing.JTextArea txtResult;
    // End of variables declaration//GEN-END:variables

    private class TimerThread implements Runnable {

        @Override
        public void run() {
            do {
                if (timerCount == 0) {
                    checkBatteryLevels();
                    timerCount = 60;
                } else {
                    lblTimerCount.setText(timerCount + "s left");
                    timerCount--;

                    try {
                        Thread.sleep(1000);//1 seg
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            } while (!timerStopped);
            
        }

    }

}
